var logToFile = require('logtofile')
    , EventEmitter = require('events').EventEmitter
    , util = require('util')
    , color = require("./color");


var Logger = function (config) {

    var config = config || {};
    config.enable = config.enable || ["debug", "stdout", "stderr"];


    this.log = logToFile.create(config);

    this.enabled = {
        debug: false,
        info : false,
        warn : false,
        error: false,
        fatal: false,
        stdout: false
    };


    if (typeof config.enable === 'object') {
        var i = config.enable.length;
        //write for loop
        while (i--) {

            if (config.enable[i] === "debug")
                this.enabled.debug = true;
            else if (config.enable[i] === "info")
                this.enabled.info = true;
            else if (config.enable[i] === "warn")
                this.enabled.warn = true;
            else if (config.enable[i] === "error")
                this.enabled.error = true;
            else if (config.enable[i] === "fatal")
                this.enabled.fatal = true;
            else if (config.enable[i] === "stdout")
                this.enabled.stdout = true;
            else if (config.enable[i] === "stderr")
                this.enabled.stderr = true;

        }
    }
};

util.inherits(Logger, EventEmitter);


Logger.prototype.error = function (msg) {

    if (this.enabled.error === false)
        return this;

    var date = new Date();
    this.log.write("\n" + date.toString() + "  ERROR:  " + msg);
    return this;

};

Logger.prototype.fatal = function (msg) {

    if (this.enabled.fatal === false)
        return this;

    var date = new Date();
    this.log.write("\n" + date.toString() + "  FATAL:  " + msg);
    return this;

};


Logger.prototype.warn = function (msg) {

    if (this.enabled.warn === false)
        return this;

    var date = new Date();
    this.log.write("\n" + date.toString() + "  WARN:  " + msg);
    return this;

};

Logger.prototype.info = function (msg) {

    if (this.enabled.info === false)
        return this;

    var date = new Date();
    this.log.write("\n" + date.toString() + "  INFO:  " + msg);
    return this;
};

Logger.prototype.debug = function (msg) {

    if (this.enabled.debug === false)
        return this;

    var date = new Date();
    this.log.write("\n" + date.toString() + "  DEBUG:  " + msg);
    return this;
};


Logger.prototype.stdout = function (msg) {
    if (this.enabled.stdout === false)
        return this;

    var date = new Date();
    var msgStr = date.toString() + "  OUT:  " + msg + "\n"
    process.stdout.write(msgStr.blue);
    return this;

};

Logger.prototype.stderr = function (msg) {

    if (this.enabled.stderr === false)
        return this;

    var date = new Date();
    var msgStr = date.toString() + "   ERROR: " + msg + "\n";
    process.stderr.write(msgStr.red);
    return this;

};

Logger.prototype.enable = function (type) {

    if (type === "debug")
        this.enabled.debug = true;
    else if (type === "info")
        this.enabled.info = true;
    else if (type === "warn")
        this.enabled.warn = true;
    else if (type === "error")
        this.enabled.error = true;
    else if (type === "fatal")
        this.enabled.fatal = true;
    else if (type === "stdout")
        this.enabled.stdout = true;
    else if (type === "syslog")
        this.enabled.syslog = true;

    return this;

};

Logger.prototype.disable = function (type) {

    if (type === "debug")
        this.enabled.debug = false;
    else if (type === "info")
        this.enabled.info = false;
    else if (type === "warn")
        this.enabled.warn = false;
    else if (type === "error")
        this.enabled.error = false;
    else if (type === "fatal")
        this.enabled.fatal = false;
    else if (type === "stdout")
        this.enabled.stdout = false;
    else if (type === "syslog")
        this.enabled.syslog = false;

    return this;

};

exports.Logger = Logger;

/*******************************************************************************
 * Exports
 *******************************************************************************/
exports.create = function (config) {
    return new Logger(config);
};

